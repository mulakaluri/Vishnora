generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Severity {
  Critical
  High
  Medium
  Low
}

enum FindingStatus {
  Validated
  Potential
}

enum CampaignStatus {
  queued
  running
  completed
  failed
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  users     User[]
  projects  Project[]
  createdAt DateTime  @default(now())
}

model User {
  id        String       @id @default(cuid())
  email     String       @unique
  name      String?
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  createdAt DateTime     @default(now())
}

model Project {
  id        String       @id @default(cuid())
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String
  name      String
  services  Service[]
  campaigns Campaign[]
  createdAt DateTime     @default(now())
}

model Service {
  id        String    @id @default(cuid())
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String
  name      String
  type      String // e.g., "api","k8s","saas"
  findings  Finding[]
}

model Campaign {
  id        String         @id @default(cuid())
  project   Project        @relation(fields: [projectId], references: [id])
  projectId String
  module    String // "api" | "identity" | "k8s" | "saas"
  env       String // "staging" | "prod"
  safe      Boolean        @default(true)
  rate      Int            @default(10)
  notes     String?
  status    CampaignStatus @default(queued)
  createdAt DateTime       @default(now())
  findings  Finding[]
}

model Finding {
  id       String   @id
  title    String
  severity Severity
  module   String

  // keep this for the UI display:
  service String

  status FindingStatus
  time   DateTime      @default(now())

  // NEW: optional relation to Service (backing the Service.findings[])
  serviceId  String?
  serviceRef Service? @relation(fields: [serviceId], references: [id])

  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  campaignId String?

  evidence Evidence?
}

model Evidence {
  id        String   @id @default(cuid())
  finding   Finding  @relation(fields: [findingId], references: [id])
  findingId String   @unique
  pocCurl   String?
  harUrl    String?
  details   Json? // keep meta
  resSample String? // small text body (e.g., 5â€“10 KB)
  createdAt DateTime @default(now())
}
