
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  orgId: 'orgId',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  type: 'type'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  module: 'module',
  env: 'env',
  safe: 'safe',
  rate: 'rate',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.FindingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  severity: 'severity',
  module: 'module',
  service: 'service',
  status: 'status',
  time: 'time',
  serviceId: 'serviceId',
  campaignId: 'campaignId'
};

exports.Prisma.EvidenceScalarFieldEnum = {
  id: 'id',
  findingId: 'findingId',
  pocCurl: 'pocCurl',
  harUrl: 'harUrl',
  details: 'details',
  resSample: 'resSample',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Severity = exports.$Enums.Severity = {
  Critical: 'Critical',
  High: 'High',
  Medium: 'Medium',
  Low: 'Low'
};

exports.FindingStatus = exports.$Enums.FindingStatus = {
  Validated: 'Validated',
  Potential: 'Potential'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  queued: 'queued',
  running: 'running',
  completed: 'completed',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  User: 'User',
  Project: 'Project',
  Service: 'Service',
  Campaign: 'Campaign',
  Finding: 'Finding',
  Evidence: 'Evidence'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/srikanthmulakaluri/usv-demo/worker/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/srikanthmulakaluri/usv-demo/worker/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum Severity {\n  Critical\n  High\n  Medium\n  Low\n}\n\nenum FindingStatus {\n  Validated\n  Potential\n}\n\nenum CampaignStatus {\n  queued\n  running\n  completed\n  failed\n}\n\nmodel Organization {\n  id        String    @id @default(cuid())\n  name      String\n  users     User[]\n  projects  Project[]\n  createdAt DateTime  @default(now())\n}\n\nmodel User {\n  id        String       @id @default(cuid())\n  email     String       @unique\n  name      String?\n  org       Organization @relation(fields: [orgId], references: [id])\n  orgId     String\n  createdAt DateTime     @default(now())\n}\n\nmodel Project {\n  id        String       @id @default(cuid())\n  org       Organization @relation(fields: [orgId], references: [id])\n  orgId     String\n  name      String\n  services  Service[]\n  campaigns Campaign[]\n  createdAt DateTime     @default(now())\n}\n\nmodel Service {\n  id        String    @id @default(cuid())\n  project   Project   @relation(fields: [projectId], references: [id])\n  projectId String\n  name      String\n  type      String // e.g., \"api\",\"k8s\",\"saas\"\n  findings  Finding[]\n}\n\nmodel Campaign {\n  id        String         @id @default(cuid())\n  project   Project        @relation(fields: [projectId], references: [id])\n  projectId String\n  module    String // \"api\" | \"identity\" | \"k8s\" | \"saas\"\n  env       String // \"staging\" | \"prod\"\n  safe      Boolean        @default(true)\n  rate      Int            @default(10)\n  notes     String?\n  status    CampaignStatus @default(queued)\n  createdAt DateTime       @default(now())\n  findings  Finding[]\n}\n\nmodel Finding {\n  id       String   @id\n  title    String\n  severity Severity\n  module   String\n\n  // keep this for the UI display:\n  service String\n\n  status FindingStatus\n  time   DateTime      @default(now())\n\n  // NEW: optional relation to Service (backing the Service.findings[])\n  serviceId  String?\n  serviceRef Service? @relation(fields: [serviceId], references: [id])\n\n  campaign   Campaign? @relation(fields: [campaignId], references: [id])\n  campaignId String?\n\n  evidence Evidence?\n}\n\nmodel Evidence {\n  id        String   @id @default(cuid())\n  finding   Finding  @relation(fields: [findingId], references: [id])\n  findingId String   @unique\n  pocCurl   String?\n  harUrl    String?\n  details   Json? // keep meta\n  resSample String? // small text body (e.g., 5â€“10 KB)\n  createdAt DateTime @default(now())\n}\n",
  "inlineSchemaHash": "45818be79ba1810a7d8d8fd171de3f9a04d9b7dbbed35950249ec694e166390c",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Organization\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"OrganizationToUser\"},{\"name\":\"projects\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"OrganizationToProject\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"org\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"OrganizationToUser\"},{\"name\":\"orgId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Project\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"org\",\"kind\":\"object\",\"type\":\"Organization\",\"relationName\":\"OrganizationToProject\"},{\"name\":\"orgId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"services\",\"kind\":\"object\",\"type\":\"Service\",\"relationName\":\"ProjectToService\"},{\"name\":\"campaigns\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignToProject\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Service\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToService\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"findings\",\"kind\":\"object\",\"type\":\"Finding\",\"relationName\":\"FindingToService\"}],\"dbName\":null},\"Campaign\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"CampaignToProject\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"module\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"env\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"safe\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"rate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"CampaignStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"findings\",\"kind\":\"object\",\"type\":\"Finding\",\"relationName\":\"CampaignToFinding\"}],\"dbName\":null},\"Finding\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"severity\",\"kind\":\"enum\",\"type\":\"Severity\"},{\"name\":\"module\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"service\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"FindingStatus\"},{\"name\":\"time\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"serviceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"serviceRef\",\"kind\":\"object\",\"type\":\"Service\",\"relationName\":\"FindingToService\"},{\"name\":\"campaign\",\"kind\":\"object\",\"type\":\"Campaign\",\"relationName\":\"CampaignToFinding\"},{\"name\":\"campaignId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"evidence\",\"kind\":\"object\",\"type\":\"Evidence\",\"relationName\":\"EvidenceToFinding\"}],\"dbName\":null},\"Evidence\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"finding\",\"kind\":\"object\",\"type\":\"Finding\",\"relationName\":\"EvidenceToFinding\"},{\"name\":\"findingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pocCurl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"harUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"details\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"resSample\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

